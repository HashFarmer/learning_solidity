被import的.sol文件，不必部署到链上，也可以实例化，也可以调用其中的函数

import 多层次嵌套，只import 一层即可


============ a.sol ========================================

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

// 定义在contract外部的struct，function都可以直接使用
struct Point {
    uint x;
    uint y;
}

error Unauthorized(address caller);

function add(uint x, uint y) pure returns (uint) {
    return x + y;
}

================= Foo.sol ==================================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "./a.sol"

contract Foo {
    string public name = "Foo";
    // contract外定义的，都可以直接使用
    uint public sum = add(1,2);
    Point public p = Point(3,5);
}

====================================================

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

// import Foo.sol from current directory
import "./Foo.sol";

// import {symbol1 as alias, symbol2} from "filename";
import {Unauthorized, add as func, Point} from "./Foo.sol";

contract Import {
    // Initialize Foo.sol
    Foo public foo = new Foo(); //这相当于一个状态变量了吧，应该是上链了，但是它的地址怎么获取呢？
    address public foo_addr = address(foo); //这样吗？
    
    // import文件里的合约外的，这里也可以直接使用
    // 可以看出，import过来的元素和本文件定义的元素有同样的地位，但是这样就会出现命名的冲突，如果本文件有一个同样的Point的struct，就会出现编译错误
    // 还是rust处理的比较好，就是把他们放到一个模块中，避免和本文件同名元素冲突
    uint public sum = add(1,2);
    Point public p = Point(3,5);

    // Test Foo.sol by getting it's name.
    function getFooName() public view returns (string memory) {
        return foo.name();
    }
}
